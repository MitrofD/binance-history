import { ConfigService } from '@nestjs/config';
import { ThrottlerModuleOptions } from '@nestjs/throttler';
import { ThrottlerStorageRedisService } from 'nestjs-throttler-storage-redis';
import { getThrottlerRedisConfig } from './redis.config';
import { EnvHelper } from './env.config';

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Throttler —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º EnvHelper –∏ Redis
 */
export const getThrottlerConfig = (
  configService: ConfigService,
): ThrottlerModuleOptions => {
  
  // –ü–æ–ª—É—á–∞–µ–º Redis –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Throttler
  const redisConfig = getThrottlerRedisConfig(configService);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º TTL –¥–ª—è download –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
  const downloadTtl = EnvHelper.getConfig(configService, 'RATE_LIMIT_DOWNLOAD_TTL', {
    development: 60000,     // 1 –º–∏–Ω—É—Ç–∞ –≤ dev
    production: 300000,     // 5 –º–∏–Ω—É—Ç –≤ prod (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏)
    test: 10000,            // 10 —Å–µ–∫—É–Ω–¥ –≤ —Ç–µ—Å—Ç–∞—Ö
    default: 300000,
  });

  const throttlerOptions: ThrottlerModuleOptions = {
    // Redis storage –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ rate limiting
    storage: new ThrottlerStorageRedisService({
      host: redisConfig.host,
      port: redisConfig.port,
      password: redisConfig.password,
      db: redisConfig.db,
      keyPrefix: redisConfig.keyPrefix,
    }),

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ rate limiting –ø–æ —Å—Ä–µ–¥–∞–º
    throttlers: [
      {
        name: 'default',
        ttl: 60000, // 1 –º–∏–Ω—É—Ç–∞
        limit: EnvHelper.getConfig(configService, 'RATE_LIMIT_DEFAULT', {
          development: 1000,  // –í dev –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–ª–∞–¥–∫–∏
          production: 100,    // –í prod –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –∑–∞—â–∏—Ç—ã
          test: 10000,        // –í —Ç–µ—Å—Ç–∞—Ö –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
          default: 100,
        }),
      },
      
      {
        name: 'strict',
        ttl: 60000, // 1 –º–∏–Ω—É—Ç–∞
        limit: EnvHelper.getConfig(configService, 'RATE_LIMIT_STRICT', {
          development: 100,   // –í dev —Ç–æ–∂–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
          production: 10,     // –í prod —Å—Ç—Ä–æ–≥–æ
          test: 1000,         // –í —Ç–µ—Å—Ç–∞—Ö –ø–æ—Å–ª–∞–±–ª–µ–Ω–∏—è
          default: 10,
        }),
      },
      
      {
        name: 'download',
        ttl: downloadTtl, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        limit: EnvHelper.getConfig(configService, 'RATE_LIMIT_DOWNLOAD', {
          development: 100,   // –í dev –º–æ–∂–µ–º –∑–∞–≥—Ä—É–∂–∞—Ç—å —á–∞—Å—Ç–æ
          production: 20,     // –í prod –æ–≥—Ä–∞–∏—á–∏–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á
          test: 1000,         // –í —Ç–µ—Å—Ç–∞—Ö –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
          default: 20,
        }),
      },
      
      {
        name: 'api-heavy',
        ttl: 60000, // 1 –º–∏–Ω—É—Ç–∞
        limit: EnvHelper.getConfig(configService, 'RATE_LIMIT_API_HEAVY', {
          development: 200,   // –í dev –±–æ–ª—å—à–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          production: 50,     // –í prod –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç—è–∂–µ–ª—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
          test: 1000,         // –í —Ç–µ—Å—Ç–∞—Ö –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
          default: 50,
        }),
      },
    ],

    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ rate limit
    errorMessage: EnvHelper.getByEnv(configService, {
      development: 'Rate limit exceeded. You are making too many requests. (Development mode)',
      production: 'Too many requests. Please try again later.',
      test: 'Rate limit exceeded in test',
      default: 'Rate limit exceeded. Please try again later.',
    }),

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ä–µ–¥
    skipIf: () => {
      // –í test —Å—Ä–µ–¥–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º rate limiting –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ —è–≤–Ω–æ
      if (EnvHelper.isTest(configService)) {
        return !configService.get('ENABLE_THROTTLING_IN_TESTS', false);
      }
      
      // –í development –º–æ–∂–µ–º –æ—Ç–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ä–µ–¥—ã
      if (EnvHelper.isDevelopment(configService)) {
        return configService.get('DISABLE_THROTTLING_IN_DEV', false);
      }
      
      return false;
    },

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ User-Agents –≤ development
    ignoreUserAgents: EnvHelper.isDevelopment(configService) ? [
      /postman/i,
      /insomnia/i,
      /curl/i,
      /wget/i,
      /httpie/i,
    ] : [],
  };

  // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é throttler (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏)
  EnvHelper.onlyInEnv(configService, 'development', () => {
    EnvHelper.logConfig(configService, 'Throttler Configuration', {
      'Redis DB': redisConfig.db,
      'Default Limit': '100 requests/min (varies by env)',
      'Strict Limit': '10 requests/min (varies by env)', 
      'Download Limit': `varies by env, TTL: ${Math.floor(downloadTtl / 1000)}s in current env`,
      'Heavy API Limit': '50 requests/min (varies by env)',
      'Skip in Tests': EnvHelper.isTest(configService) && !configService.get('ENABLE_THROTTLING_IN_TESTS', false),
      'Disabled in Dev': EnvHelper.isDevelopment(configService) && configService.get('DISABLE_THROTTLING_IN_DEV', false),
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ä–µ–¥—ã
    const currentEnv = EnvHelper.getCurrentEnv(configService);
    EnvHelper.devLog(configService, `üìä Current limits for ${currentEnv}:`);
    EnvHelper.devLog(configService, `   Default: ${throttlerOptions.throttlers[0].limit}/min`);
    EnvHelper.devLog(configService, `   Strict: ${throttlerOptions.throttlers[1].limit}/min`);
    EnvHelper.devLog(configService, `   Download: ${throttlerOptions.throttlers[2].limit}/${Math.floor(downloadTtl / 1000)}s`);
    EnvHelper.devLog(configService, `   Heavy API: ${throttlerOptions.throttlers[3].limit}/min`);
    
    if (throttlerOptions.ignoreUserAgents?.length > 0) {
      EnvHelper.devLog(
        configService, 
        `üîì Ignoring User-Agents: ${throttlerOptions.ignoreUserAgents.map(ua => ua.source).join(', ')}`
      );
    }
  });

  return throttlerOptions;
};

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑ Redis (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
 */
export const getSimpleThrottlerConfig = (
  configService: ConfigService,
): ThrottlerModuleOptions => {
  
  EnvHelper.devLog(configService, '‚ö†Ô∏è  Using simple throttler (no Redis)');
  
  const simpleConfig: ThrottlerModuleOptions = {
    throttlers: [
      {
        name: 'default',
        ttl: 60000, // 1 –º–∏–Ω—É—Ç–∞
        limit: EnvHelper.ifDev(configService, 1000, 100),
      },
    ],
    
    errorMessage: 'Rate limit exceeded. Please try again later.',
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –≤ —Ç–µ—Å—Ç–∞—Ö
    skipIf: () => EnvHelper.isTest(configService),
  };

  // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  EnvHelper.onlyInEnv(configService, 'development', () => {
    EnvHelper.logConfig(configService, 'Simple Throttler Configuration (No Redis)', {
      'Default Limit': `${simpleConfig.throttlers[0].limit}/min`,
      'TTL': '60s',
      'Skip in Tests': EnvHelper.isTest(configService),
    });
  });

  return simpleConfig;
};

/**
 * –•–µ–ª–ø–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å throttling
 */
export class ThrottlerHelper {
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Redis –¥–ª—è throttler
   */
  static async isRedisAvailable(configService: ConfigService): Promise<boolean> {
    try {
      const redisConfig = getThrottlerRedisConfig(configService);
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Redis –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –µ—Å–ª–∏ –ø–∞–∫–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
      const Redis = require('ioredis');
      
      const client = new Redis({
        host: redisConfig.host,
        port: redisConfig.port,
        password: redisConfig.password,
        db: redisConfig.db,
        connectTimeout: 2000,
        retryDelayOnFailover: 100,
        maxRetriesPerRequest: 1,
        lazyConnect: true, // –ù–µ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      });
      
      await client.ping();
      await client.quit();
      return true;
    } catch (error) {
      EnvHelper.devLog(configService, '‚ùå Redis not available for throttler:', error.message);
      return false;
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É throttling –∏–∑ Redis
   */
  static async getThrottlingStats(configService: ConfigService): Promise<{
    totalKeys: number;
    keysByType: Record<string, number>;
  }> {
    try {
      const redisConfig = getThrottlerRedisConfig(configService);
      const Redis = require('ioredis');
      
      const client = new Redis({
        host: redisConfig.host,
        port: redisConfig.port,
        password: redisConfig.password,
        db: redisConfig.db,
        lazyConnect: true,
      });
      
      const keys = await client.keys(`${redisConfig.keyPrefix}*`);
      const stats = {
        totalKeys: keys.length,
        keysByType: {} as Record<string, number>,
      };
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–ª—é—á–∏ –ø–æ —Ç–∏–ø–∞–º (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
      keys.forEach(key => {
        if (typeof key === 'string') {
          const parts = key.split(':');
          const type = parts.length > 1 ? parts[1] : 'unknown';
          stats.keysByType[type] = (stats.keysByType[type] || 0) + 1;
        }
      });
      
      await client.quit();
      return stats;
    } catch (error) {
      throw new Error(`Failed to get throttling stats: ${error.message}`);
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∫–ª—é—á–∏ throttling (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  static async clearThrottlingData(configService: ConfigService): Promise<number> {
    if (EnvHelper.isProduction(configService)) {
      throw new Error('Cannot clear throttling data in production');
    }

    try {
      const redisConfig = getThrottlerRedisConfig(configService);
      const Redis = require('ioredis');
      
      const client = new Redis({
        host: redisConfig.host,
        port: redisConfig.port,
        password: redisConfig.password,
        db: redisConfig.db,
        lazyConnect: true,
      });
      
      const keys = await client.keys(`${redisConfig.keyPrefix}*`);
      
      if (keys.length > 0) {
        await client.del(...keys);
      }
      
      await client.quit();
      EnvHelper.devLog(configService, `üßπ Cleared ${keys.length} throttling keys`);
      return keys.length;
    } catch (error) {
      throw new Error(`Failed to clear throttling data: ${error.message}`);
    }
  }
}