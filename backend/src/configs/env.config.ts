import * as path from 'path';
import type { ConfigModuleOptions } from '@nestjs/config';
import type { ConfigService } from '@nestjs/config';

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç–∏ –∫ environment —Ñ–∞–π–ª–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ NODE_ENV
 */
export function getEnvFilePaths(): ConfigModuleOptions['envFilePath'] {
  const envExt = 'env';
  const envPath = `${envExt}s`;
  const modeEnv = process.env.NODE_ENV || 'development';

  return [
    path.resolve(envPath, `.${envExt}`), // envs/.env
    path.resolve(envPath, `${modeEnv}.${envExt}`), // envs/development.env
  ];
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è ConfigModule
 */
export function getBaseConfigOptions(): ConfigModuleOptions {
  return {
    envFilePath: getEnvFilePaths(),
    isGlobal: true,
    cache: true,
    expandVariables: true,
  };
}

// =================================================================
// –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–´–ï –•–ï–õ–ü–ï–†–´ –î–õ–Ø ENVIRONMENT –ü–†–û–í–ï–†–û–ö
// =================================================================

/**
 * –•–µ–ª–ø–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º (—É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)
 */
export class EnvHelper {
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ç–µ–∫—É—â–∞—è —Å—Ä–µ–¥–∞ - development
   */
  static isDevelopment(configService: ConfigService): boolean {
    return configService.get('NODE_ENV') === 'development';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ç–µ–∫—É—â–∞—è —Å—Ä–µ–¥–∞ - production
   */
  static isProduction(configService: ConfigService): boolean {
    return configService.get('NODE_ENV') === 'production';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ç–µ–∫—É—â–∞—è —Å—Ä–µ–¥–∞ - test
   */
  static isTest(configService: ConfigService): boolean {
    return configService.get('NODE_ENV') === 'test';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ä–µ–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  static getCurrentEnv(configService: ConfigService): string {
    return configService.get('NODE_ENV', 'development');
  }

  /**
   * –•–µ–ª–ø–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º —Å—Ä–µ–¥—ã
   * @example
   * EnvHelper.getByEnv(configService, {
   *   development: 1000,
   *   production: 5000,
   *   test: 100,
   *   default: 2000
   * })
   */
  static getByEnv<T>(
    configService: ConfigService,
    options: {
      development?: T;
      production?: T;
      test?: T;
      default: T;
    },
  ): T {
    const env = this.getCurrentEnv(configService);
    return options[env as keyof typeof options] ?? options.default;
  }

  /**
   * –ü—Ä–æ—Å—Ç–æ–π —Ö–µ–ª–ø–µ—Ä –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–µ–∂–¥—É dev –∏ prod –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
   * @example
   * EnvHelper.ifDev(configService, 'dev-value', 'prod-value')
   */
  static ifDev<T>(configService: ConfigService, devValue: T, prodValue: T): T {
    return this.isDevelopment(configService) ? devValue : prodValue;
  }

  /**
   * –•–µ–ª–ø–µ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ development —Å—Ä–µ–¥–µ
   * @example
   * EnvHelper.devLog(configService, 'Debug info:', { data: 'test' })
   */
  static devLog(
    configService: ConfigService,
    message: string,
    ...args: any[]
  ): void {
    if (this.isDevelopment(configService)) {
      console.log(message, ...args);
    }
  }

  /**
   * –•–µ–ª–ø–µ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ä–µ–¥–µ
   * @example
   * EnvHelper.onlyInEnv(configService, 'development', () => {
   *   console.log('Only in dev');
   * })
   */
  static onlyInEnv(
    configService: ConfigService,
    env: 'development' | 'production' | 'test',
    callback: () => void,
  ): void {
    if (this.getCurrentEnv(configService) === env) {
      callback();
    }
  }

  /**
   * –•–µ–ª–ø–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å fallback –ø–æ —Å—Ä–µ–¥–∞–º
   * @example
   * EnvHelper.getConfig(configService, 'BATCH_SIZE', {
   *   development: 1000,
   *   production: 5000,
   *   default: 2000
   * })
   */
  static getConfig<T>(
    configService: ConfigService,
    key: string,
    fallbacks: {
      development?: T;
      production?: T;
      test?: T;
      default: T;
    },
  ): T {
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const configValue = configService.get<T>(key);
    if (configValue !== undefined) {
      return configValue;
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø–æ —Å—Ä–µ–¥–µ
    return this.getByEnv(configService, fallbacks);
  }

  /**
   * –•–µ–ª–ø–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ development
   */
  static logConfig(
    configService: ConfigService,
    title: string,
    config: Record<string, any>,
  ): void {
    if (this.isDevelopment(configService)) {
      console.log(`üîß ${title}:`);
      Object.entries(config).forEach(([key, value]) => {
        // –ú–∞—Å–∫–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª–∏ –∏ —Å–µ–∫—Ä–µ—Ç—ã
        const maskedValue =
          key.toLowerCase().includes('password') ||
          key.toLowerCase().includes('secret') ||
          key.toLowerCase().includes('token')
            ? '***'
            : value;
        console.log(`   ${key}: ${maskedValue}`);
      });
      console.log('');
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å feature flag –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ä–µ–¥—ã
   * @example
   * EnvHelper.isFeatureEnabled(configService, 'DETAILED_LOGGING', ['development', 'test'])
   */
  static isFeatureEnabled(
    configService: ConfigService,
    featureKey: string,
    enabledInEnvs: ('development' | 'production' | 'test')[] = ['development'],
  ): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥
    const explicitValue = configService.get<boolean>(featureKey);
    if (explicitValue !== undefined) {
      return explicitValue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—Ä–µ–¥—ã
    const currentEnv = this.getCurrentEnv(configService);
    return enabledInEnvs.includes(currentEnv as any);
  }
}
